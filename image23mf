#!/usr/bin/env python

from PIL import Image, ImagePalette
from sys import argv

from xml.dom.minidom import getDOMImplementation

from zipfile import ZipFile
import uuid
from datetime import datetime

## Configuration

SIZE = 70 # mm
HOLE_SIZE = 0.8 # mm
HOLE_DENSITY_PERCENT = 100 # %

COHESION_LAYER_HEIGHT = 1
COLOR_LAYER_HEIGHT = 0.6

## End configuration

INPUT_IMAGE_PATH = argv[1]

HOLE_DENSITY = HOLE_DENSITY_PERCENT * 0.4 / 100

RESOLUTION = int(SIZE / HOLE_SIZE)
HOLE_COUNT = int(RESOLUTION * HOLE_DENSITY)
SCALE = SIZE / RESOLUTION

HOLE_FREQUENCY = round((RESOLUTION - HOLE_SIZE * SCALE * HOLE_COUNT) / HOLE_COUNT)
HOLE_OFFSET = int(HOLE_FREQUENCY / 2)
DITHER = False

class Layer:
    def __init__(self, z, thickness, scale):
        self.z = z
        self.thickness = thickness
        self.scale = scale
        self.faces = []
        self.faces_index = {}

    def put_pixel(self, x, y):
        scaled_x = x * self.scale
        scaled_y = y * self.scale

        # Define the 8 vertices of the pixel
        vertices = [
            [scaled_x,               scaled_y,                self.z                  ],
            [scaled_x + self.scale,  scaled_y,                self.z                  ],
            [scaled_x + self.scale,  scaled_y + self.scale,   self.z                  ],
            [scaled_x,               scaled_y + self.scale,   self.z                  ],
            [scaled_x,               scaled_y,                self.z + self.thickness ],
            [scaled_x + self.scale,  scaled_y,                self.z + self.thickness ],
            [scaled_x + self.scale,  scaled_y + self.scale,   self.z + self.thickness ],
            [scaled_x,               scaled_y + self.scale,   self.z + self.thickness ]
        ]

        # Define the 12 triangles composing the pixel
        faces = [
            [0, 3, 1], # Bottom
            [1, 3, 2], # Bottom
            [4, 5, 6], # Top
            [4, 6, 7], # Top
            # [0, 4, 7],
            # [0, 7, 3],
            # [5, 1, 2],
            # [5, 2, 6],
            # [2, 3, 6],
            # [3, 7, 6],
            # [0, 1, 5],
            # [0, 5, 4]
        ]

        for face in faces:
            face_vertices = [vertices[vertex_index] for vertex_index in face]
            face_vertices.sort()

            # face_vertices_key = 'x'.join([ '-'.join(map(str, face_vertices)) for face_vertices in face_vertices ])

            # # Remove all faces in double
            # if face_vertices_key in self.faces_index:
            #     # Set to None to avoid index issues
            #     self.faces[self.faces_index[face_vertices_key]] = None
            #     continue
            # self.faces_index[face_vertices_key] = len(self.faces)

            self.faces.append(face_vertices)

def add_layer_to_model(model_document, layer, paint_color):
    object_id = str(uuid.uuid4())

    # Make sure the required nodes are present
    try:
        resources_element = model_document.getElementsByTagName("resources")[0]
    except IndexError:
        resources_element = model_document.createElement("resources")
        model_document.documentElement.appendChild(resources_element)

    try:
        build_element = model_document.getElementsByTagName("build")[0]
    except IndexError:
        build_element = model_document.createElement("build")
        model_document.documentElement.appendChild(build_element)

    object_element = model_document.createElement("object")
    object_element.setAttribute("id", object_id)
    object_element.setAttribute("type", "model")
    resources_element.appendChild(object_element)

    mesh_element = model_document.createElement("mesh")
    object_element.appendChild(mesh_element)

    vertices_element = model_document.createElement("vertices")
    mesh_element.appendChild(vertices_element)

    triangles_element = model_document.createElement("triangles")
    mesh_element.appendChild(triangles_element)

    item_element = model_document.createElement("item")
    item_element.setAttribute("objectid", object_id)
    item_element.setAttribute("transform", "1 0 0 0 1 0 0 0 1 90 90 0")
    item_element.setAttribute("printable", "1")
    build_element.appendChild(item_element)

    vertice_index = 0
    for face in layer.faces:
        # if face is None:
        #     continue

        for vertex in face:
            vertice = model_document.createElement("vertex")
            vertice.setAttribute("x", str(vertex[0]))
            vertice.setAttribute("y", str(vertex[1]))
            vertice.setAttribute("z", str(vertex[2]))
            vertices_element.appendChild(vertice)

        triangle_element = model_document.createElement("triangle")
        triangle_element.setAttribute("v1", str(vertice_index + 0))
        triangle_element.setAttribute("v2", str(vertice_index + 1))
        triangle_element.setAttribute("v3", str(vertice_index + 2))
        triangle_element.setAttribute("paint_color", paint_color)
        triangles_element.appendChild(triangle_element)

        vertice_index += len(face)

def create_model_document():
    model_document = getDOMImplementation().createDocument(None, "model", None)

    model_document.documentElement.setAttribute("unit", "millimeter")
    model_document.documentElement.setAttribute("xml:lang", "en-US")
    model_document.documentElement.setAttribute("xmlns", "http://schemas.microsoft.com/3dmanufacturing/core/2015/02")

    return model_document

colors_configuration = {
    "black":    [ 0, 0, 0],
    "white":    [ 255, 255, 255 ],
    "blue":     [ 0, 120, 191 ]
}

flat_colors = []
for rgb in colors_configuration.values():
    flat_colors.append(rgb[0])
    flat_colors.append(rgb[1])
    flat_colors.append(rgb[2])

palette = ImagePalette.ImagePalette(palette=flat_colors * 32) # Why 32?

with Image.open(INPUT_IMAGE_PATH) as image:
    if image.mode == "RGBA":
        rgb_image = Image.new("RGB", image.size, (255, 255, 255))
        rgb_image.paste(image, mask=image.split()[3]) # remove alpha channel
    else:
        rgb_image = image

    resized_image = rgb_image.resize((RESOLUTION, RESOLUTION), Image.LANCZOS)

    image_palette = Image.new('P', resized_image.size)
    image_palette.putpalette(palette)

    quantized_image = resized_image.quantize(
        dither=Image.Dither.FLOYDSTEINBERG if DITHER else Image.Dither.NONE,
        palette=image_palette
    )
    quantized_image_data = quantized_image.load()

    cohesion_layer = Layer(z=0, thickness=COHESION_LAYER_HEIGHT, scale=SCALE)
    color_layers = {}

    model_document = create_model_document()

    for x in range(quantized_image.size[0]):
        for y in range(quantized_image.size[1]):
            # Skip holes
            if (x + HOLE_OFFSET) % HOLE_FREQUENCY == 0 and (y + HOLE_OFFSET) % HOLE_FREQUENCY == 0:
                continue

            # Add cohesion layer (ie, a tall pixel under each colored pixel to serve as a platform)
            cohesion_layer.put_pixel(x=x, y=y)

            for index, color in enumerate(colors_configuration.keys()):
                if quantized_image_data[x, y] != index:
                    continue

                color_layers.setdefault(color, Layer(z=COHESION_LAYER_HEIGHT, thickness=COLOR_LAYER_HEIGHT, scale=SCALE))
                color_layers[color].put_pixel(x=x, y=y)

    add_layer_to_model(model_document, cohesion_layer, "1")

    for color, layer in color_layers.items():
        add_layer_to_model(model_document, layer, "2")

    now = datetime.now().strftime("%m%d%Y%H%M%S")
    output_file_path = f"output-{now}.3mf"

    with ZipFile(output_file_path, 'w') as output_zip:
        output_zip.writestr('[Content_Types].xml', '''<?xml version="1.0" encoding="UTF-8"?>
<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">
    <Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>
    <Default Extension="model" ContentType="application/vnd.ms-package.3dmanufacturing-3dmodel+xml"/>
</Types>''')

        output_zip.writestr('_rels/.rels', '''<?xml version="1.0" encoding="UTF-8"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
    <Relationship Target="/3D/3dmodel.model" Id="rel-1" Type="http://schemas.microsoft.com/3dmanufacturing/2013/01/3dmodel"/>
</Relationships>''')

        output_zip.writestr('3D/3dmodel.model', model_document.toprettyxml())
