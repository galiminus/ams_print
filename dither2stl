#!/usr/bin/env python

from PIL import Image, ImagePalette
from sys import argv

import numpy as np
import stl
from stl import mesh

## Configuration

SIZE = 70 # mm
HOLE_SIZE = 0.4 # mm
HOLE_DENSITY_PERCENT = 100 # %

COHESION_LAYER_HEIGHT = 1
COLOR_LAYER_HEIGHT = 0.6

## End configuration

INPUT_IMAGE_PATH = argv[1]

HOLE_DENSITY = HOLE_DENSITY_PERCENT * 0.4 / 100

RESOLUTION = int(SIZE / HOLE_SIZE)
HOLE_COUNT = int(RESOLUTION * HOLE_DENSITY)
SCALE = SIZE / RESOLUTION

HOLE_FREQUENCY = int((RESOLUTION - HOLE_SIZE * SCALE * HOLE_COUNT) / HOLE_COUNT)
HOLE_OFFSET = int(HOLE_FREQUENCY / 2)
DITHER = False

def put_pixel(x, y, z, thickness):
    scaled_x = x * SCALE
    scaled_y = y * SCALE

    # Define the 8 vertices of the pixel
    vertices = np.array([
        [scaled_x,          scaled_y,           z            ],
        [scaled_x + SCALE,  scaled_y,           z            ],
        [scaled_x + SCALE,  scaled_y + SCALE,   z            ],
        [scaled_x,          scaled_y + SCALE,   z            ],
        [scaled_x,          scaled_y,           z + thickness],
        [scaled_x + SCALE,  scaled_y,           z + thickness],
        [scaled_x + SCALE,  scaled_y + SCALE,   z + thickness],
        [scaled_x,          scaled_y + SCALE,   z + thickness]
    ])

    # Define the 12 triangles composing the pixel
    faces = np.array([
        [0,3,1], # Bottom
        [1,3,2], # Bottom
        [4,5,6], # Top
        [4,6,7], # Top
        [0,4,7],
        [0,7,3],
        [5,1,2],
        [5,2,6],
        [2,3,6],
        [3,7,6],
        [0,1,5],
        [0,5,4]
    ])

    pixel = mesh.Mesh(np.zeros(faces.shape[0], dtype=mesh.Mesh.dtype))

    for i, f in enumerate(faces):
        for j in range(3):
            pixel.vectors[i][j] = vertices[f[j],:]

    return pixel.data

def layer_to_stl(layer, filename):
    if len(layer) > 0:
        stl_mesh = mesh.Mesh(np.concatenate(layer), remove_duplicate_polygons=False)
        stl_mesh.save(filename, mode=stl.Mode.ASCII)

colors_configuration = {
    "black":    [ 0, 0, 0],
    "white":    [ 255, 255, 255 ],
    "blue":     [ 0, 120, 191 ]
}

flat_colors = []
for rgb in colors_configuration.values():
    flat_colors.append(rgb[0])
    flat_colors.append(rgb[1])
    flat_colors.append(rgb[2])

palette = ImagePalette.ImagePalette(palette=flat_colors * 32) # Why 32?

with Image.open(INPUT_IMAGE_PATH) as image:
    if image.mode == "RGBA":
        rgb_image = Image.new("RGB", image.size, (255, 255, 255))
        rgb_image.paste(image, mask=image.split()[3]) # remove alpha channel
    else:
        rgb_image = image

    resized_image = rgb_image.resize((RESOLUTION, RESOLUTION), Image.LANCZOS)

    image_palette = Image.new('P', resized_image.size)
    image_palette.putpalette(palette)

    dithered_image = resized_image.quantize(
        dither=Image.Dither.FLOYDSTEINBERG if DITHER else Image.Dither.NONE,
        palette=image_palette
    )
    dithered_image_data = dithered_image.load()

    cohesion_layer = []
    color_layers = {}

    for x in range(dithered_image.size[0]):
        for y in range(dithered_image.size[1]):
            # Skip holes
            if (x + HOLE_OFFSET) % HOLE_FREQUENCY == 0 and (y + HOLE_OFFSET) % HOLE_FREQUENCY == 0:
                continue

            # Add cohesion layer (ie, a tall pixel under each colored pixel to serve as a platform)
            cohesion_layer.append(
                put_pixel(x=x, y=y, z=0, thickness=COHESION_LAYER_HEIGHT)
            )

            for index, color in enumerate(colors_configuration.keys()):
                if dithered_image_data[x, y] != index:
                    continue

                pixel = put_pixel(
                    x=x,
                    y=y,
                    z=COHESION_LAYER_HEIGHT, # On top of the cohesion layer
                    thickness=COLOR_LAYER_HEIGHT
                )

                color_layers.setdefault(color, [])
                color_layers[color].append(pixel)

    layer_to_stl(cohesion_layer, f'cohesion_{HOLE_SIZE}_{HOLE_FREQUENCY}.stl')

    for color, layer in color_layers.items():
        layer_to_stl(layer, f'{color}_color_{HOLE_SIZE}_{HOLE_FREQUENCY}.stl')
