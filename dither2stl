#!/usr/bin/env python

from PIL import Image, ImagePalette
from sys import argv

import numpy as np
import stl
from stl import mesh

WIDTH = 92
HEIGHT = 92

def put_pixel(x, y, z):
    # Define the 8 vertices of the cube
    vertices = np.array([
        [x, y, z],
        [x+1, y, z],
        [x+1, y+1, z],
        [x, y+1, z],
        [x, y, z+1],
        [x+1, y, z+1],
        [x+1, y+1, z+1],
        [x, y+1, z+1]
    ])

    # Define the 12 triangles composing the cube
    faces = np.array([
        [0,3,1],
        [1,3,2],
        [0,4,7],
        [0,7,3],
        [4,5,6],
        [4,6,7],
        [5,1,2],
        [5,2,6],
        [2,3,6],
        [3,7,6],
        [0,1,5],
        [0,5,4]
    ])

    cube = mesh.Mesh(np.zeros(faces.shape[0], dtype=mesh.Mesh.dtype))

    for i, f in enumerate(faces):
        for j in range(3):
            cube.vectors[i][j] = vertices[f[j],:]

    return cube

colors = {
    "black": [ 0, 0, 0 ],
    "white": [ 255, 255, 255 ],
    "red": [ 255, 0, 0 ],
    "blue": [ 0, 0, 255 ]
}

print(colors.keys())

flat_colors = [item for sublist in colors.values() for item in sublist]

palette = ImagePalette.ImagePalette(palette=flat_colors * 32)

with Image.open(argv[1]) as image:
    rgb_image = Image.new("RGB", image.size, (255, 255, 255))
    rgb_image.paste(image, mask=image.split()[3]) # remove alpha channel

    resized_image = rgb_image.resize((WIDTH, HEIGHT))

    image_palette = Image.new('P', resized_image.size)
    image_palette.putpalette(palette)

    dithered_image = resized_image.quantize(dither=Image.Dither.FLOYDSTEINBERG, palette=image_palette)

    data = dithered_image.getdata()

    for index in range(len(colors)):
        cubes = []
        for pixel_index, color in enumerate(data):
            x = pixel_index % WIDTH
            y = int(pixel_index / WIDTH)

            if color == index:
                cubes.append(put_pixel(x=x, y=y, z=0).data)

        if len(cubes) > 0:
            stl_mesh = mesh.Mesh(np.concatenate(cubes), remove_duplicate_polygons=False)
            stl_mesh.save(f'{list(colors.keys())[index]}.stl', mode=stl.Mode.ASCII)
